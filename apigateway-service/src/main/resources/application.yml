server:
  port: 8000

eureka:
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://localhost:8761/eureka # Eureka Server URL
#  instance:
#    instance-id: ${spring.cloud.client.ip-address}:${spring.application.instance_id:${random.value}}

spring:
  application:
    name: apigateway-service
  cloud:
    gateway:
      server:
        webflux:
          default-filters:
            - name: GlobalFilter # 우선 순위 : GlobalFilter -> CustomFilter -> LoggingFilter -> CustomFilter -> GlobalFilter
                                 # 즉, 요청시엔 순서대로, 응답시엔 역순으로 동작한다.(yml에서 정의된 순서대로, Config 클래스에서 우선순위 커스텀 지정 가능)
              args:
                baseMessage: Spring Cloud Gateway WebFlux Global Filter
                preLogger: true
                postLogger: true
          routes:
            - id: first-service
              uri: lb://MY-FIRST-SERVICE # Eureka를 통한 로드밸런싱(ip, port를 직접 지정 X)
              predicates:
                - Path=/first-service/**
              filters:
#                - AddRequestHeader=f-request, 1st-request-header-by-yml
#                - AddResponseHeader=f-request, 1st-response-header-by-yml
                - CustomFilter
            - id: second-service
              uri: lb://MY-SECOND-SERVICE # Eureka를 통한 로드밸런싱(ip, port를 직접 지정 X)
              predicates:
                - Path=/second-service/**
              filters:
#                - AddRequestHeader=s-request, 2nd-request-header-by-yml
#                - AddResponseHeader=s-request, 2nd-response-header-by-yml
                - name: CustomFilter
                - name: LoggingFilter
                  args:
                    baseMessage: Hi, there.
                    preLogger: true
                    postLogger: true
